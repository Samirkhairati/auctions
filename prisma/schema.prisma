generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          String?
  accounts      Account[]
  bids          Bid[]
  items         Item[]
  sessions      Session[]

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model Item {
  id          String    @id @default(cuid())
  name        String?
  description String?
  basePrice   Float?
  active      Boolean   @default(true)
  endedAt     DateTime?
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  bids        Bid[]
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  media       Media[]
  winner      Winner[]

  @@map("items")
}

model Media {
  id            String @id @default(cuid())
  resource_type String
  secure_url    String
  itemId        String
  item          Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@map("media")
}

model Bid {
  id        String   @id @default(cuid())
  amount    Float
  itemId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("bids")
}

model Winner {
  id        String   @id @default(cuid())
  itemId    String?
  userId    String?
  token     String?
  claimed   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  item      Item?    @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@map("winner")
}